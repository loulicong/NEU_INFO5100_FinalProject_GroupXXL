/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Government;

import System.CareCenterSystem;
import System.Community.Community;
import System.Government.Faculty;
import System.Government.Government;
import System.Role.GovernmentFaculty;
import System.Role.Role;
import System.UserAccount.UserAccount;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author raunak
 */
public class GovernmentJPanel extends JPanel {

    private JPanel userProcessContainer;
    private CareCenterSystem business;
    private UserAccount userAccount;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public GovernmentJPanel(JPanel userProcessContainer, UserAccount account, CareCenterSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business= business;
        populateRequestTable();
    }
    
    public void populateRequestTable(){
        DefaultTableModel model_1 = (DefaultTableModel) cityJTable.getModel();
        model_1.setRowCount(0);
        for(Government s: business.getGovernmentDirectory().getGovernmentArrayList()){
            if(s.getCity().getName().equals(userAccount.getUsername())){
                for(Faculty v:s.getFacultyArrayList()){
                    Object[] row = new Object[4];
                    row[0]=v.getName();
                    row[1]=v.getCommunity().getName();
                    row[2]=v.getUsername();
                    row[3]=v.getPassword();
                    model_1.addRow(row);
                }
            }
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new JScrollPane();
        cityJTable = new JTable();
        refreshTestJButton = new JButton();
        saveJButton = new JButton();
        cityJTable = new JTable();
        nameJTextfield = new JTextField();
        cityLabel = new JLabel();
        communityJTextfield = new JTextField();
        usernameJTextfield = new JTextField();
        passwordJTextfield = new JTextField();
        addJButton = new JButton();
        passwordLabel = new JLabel();
        usernameLabel = new JLabel();
        communityLabel = new JLabel();
        deleteButton = new JButton();


        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cityJTable.setModel(new DefaultTableModel(
                new Object [][] {
                        {null,null,null,null},
                        {null,null,null,null},
                        {null,null,null,null},
                        {null,null,null,null}
                },
                new String [] {
                        "name","community","username","password"
                }
        ) {
            Class[] types = new Class [] {
                    String.class,String.class,String.class,String.class
            };
            boolean[] canEdit = new boolean [] {
                    false,true,true,true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cityJTable);
        if (cityJTable.getColumnModel().getColumnCount() > 0) {
            cityJTable.getColumnModel().getColumn(0).setResizable(false);
            cityJTable.getColumnModel().getColumn(1).setResizable(false);
            cityJTable.getColumnModel().getColumn(2).setResizable(false);
            cityJTable.getColumnModel().getColumn(3).setResizable(false);
        }
        add(jScrollPane2, new AbsoluteConstraints(40, 58, 375, 96));

        addJButton.setText("add");
        addJButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("delete");
        deleteButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });
        add(deleteButton,new AbsoluteConstraints(200, 515, -1, -1));
        add(addJButton,new AbsoluteConstraints(150, 515, -1, -1));

        add(cityLabel,new AbsoluteConstraints(50, 315, -1, -1));
        add(nameJTextfield,new AbsoluteConstraints(150, 315, 375, 30));
        cityLabel.setText("faculty name");

        add(communityLabel,new AbsoluteConstraints(50, 365, -1, -1));
        add(communityJTextfield,new AbsoluteConstraints(150, 365, 375, 30));
        communityLabel.setText("community");

        add(usernameLabel,new AbsoluteConstraints(50, 415, -1, -1));
        add(usernameJTextfield,new AbsoluteConstraints(150, 415, 375, 30));
        usernameLabel.setText("username");

        add(passwordLabel,new AbsoluteConstraints(50, 465, -1, -1));
        add(passwordJTextfield,new AbsoluteConstraints(150, 465, 375, 30));
        passwordLabel.setText("password");

        saveJButton.setText("save");
        saveJButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });
        add(saveJButton,new AbsoluteConstraints(50, 215, -1, -1));


        refreshTestJButton.setText("Refresh");
        refreshTestJButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                refreshTestJButtonActionPerformed(evt);
            }
        });
        add(refreshTestJButton, new AbsoluteConstraints(150, 215, -1, -1));
    }// </editor-fold>//GEN-END:initComponents


    private void refreshTestJButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed

        populateRequestTable();
        
    }//GEN-LAST:event_refreshTestJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) cityJTable.getModel();
        int selectedRow = cityJTable.getSelectedRow();
        String username = (String) model.getValueAt(selectedRow,2);
        for(UserAccount s:business.getUserAccountDirectory().getUserAccountList()){
            if(s.getUsername().equals(username)){
                business.getUserAccountDirectory().getUserAccountList().remove(s);
            }
        }
        for(Faculty s:business.getFacultyDirectory().getFacultyArrayList()){
            if(s.getUsername().equals(username)){
                business.getFacultyDirectory().getFacultyArrayList().remove(s);
            }
        }
        for (Government s:  business.getGovernmentDirectory().getGovernmentArrayList()){
            if(userAccount.getUsername().equals(s.getUsername())){
                s.getFacultyArrayList().remove(selectedRow);
            }

        }


    }
    private void addJButtonActionPerformed(ActionEvent evt) {
        if(nameJTextfield.getText().equals("")||communityJTextfield.getText().equals("")||usernameJTextfield.getText().equals("")||passwordJTextfield.getText().equals("")){
            JOptionPane.showMessageDialog(this,"empty input");
            return;
        }
        String name= nameJTextfield.getText();
        for(int i=0;i<name.length();i++){
            if(Character.isDigit(name.charAt(i))){
                JOptionPane.showMessageDialog(this,"wrong input");
                nameJTextfield.setText("");
                return;
            }
        }
        Faculty faculty=new Faculty(name);
        String username=usernameJTextfield.getText();
        String password=passwordJTextfield.getText();
        String community_name=communityJTextfield.getText();
        faculty.setUsername(username);
        faculty.setPassword(password);
        for(Government v: business.getGovernmentDirectory().getGovernmentArrayList()){
            if(v.getCity().getName().equals(userAccount.getUsername())){
                boolean isExist = false;
                for(Community x:v.getCity().getCommunityArrayList()){
                    if(x.getName().equals(community_name)){
                        isExist=true;
                        if(x.getFaculty()!=null){
                            JOptionPane.showMessageDialog(this,"this community already have faculty");
                            communityJTextfield.setText("");
                            return;
                        }
                        faculty.setCommunity(x);
                        x.setFaculty(faculty);
                        v.getFacultyArrayList().add(faculty);
                        break;
                    }
                }
                if(!isExist){
                    JOptionPane.showMessageDialog(this,"no such community in the city");
                    communityJTextfield.setText("");
                    return;
                }
            }

        }
        Role role_8 = new GovernmentFaculty();
        business.getFacultyDirectory().getFacultyArrayList().add(faculty);
        business.getUserAccountDirectory().createUserAccount(username,password,role_8);
        nameJTextfield.setText("");
        usernameJTextfield.setText("");
        passwordJTextfield.setText("");
        communityJTextfield.setText("");
        populateRequestTable();
    }


    private void saveJButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_refreshTestJButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) cityJTable.getModel();
        for(int i = 0; i<model.getRowCount(); i++) {
            String temp_username="";
            String temp_name;
            Object temp = model.getValueAt(i, 2);
            if (temp instanceof Number) {
                temp_name = Integer.toString((Integer) temp);
            } else {
                temp_name = (String) model.getValueAt(i, 2);
            }
            Object temp_1 = model.getValueAt(i, 3);
            String password;
            if (temp instanceof Number) {
                int password_1 = (Integer) (temp);
                password = Integer.toString(password_1);
            } else {
                password = (String) model.getValueAt(i, 3);
            }
            String community_name;
            Object temp_2 = model.getValueAt(i, 1);
            if (temp_2 instanceof Number) {
                community_name = Integer.toString((Integer) temp);
            } else {
                community_name = (String) model.getValueAt(i, 1);
            }
            String name = (String)model.getValueAt(i,0);
            for(Faculty s:business.getFacultyDirectory().getFacultyArrayList()){
                if(s.getName().equals(name)){
                    temp_username=s.getUsername();
                    s.setUsername(temp_name);
                    s.setPassword(password);
                    boolean isChanged=false;
                    for(Government v: business.getGovernmentDirectory().getGovernmentArrayList()){
                        if(v.getCity().getName().equals(userAccount.getUsername())){
                            for(Community x:v.getCity().getCommunityArrayList()){
                                if(x.getName().equals(community_name)){
                                    isChanged=true;
                                    s.setCommunity(x);
                                    x.setFaculty(s);
                                    break;
                                }
                            }
                        }
                    }
                    if(!isChanged){
                        JOptionPane.showMessageDialog(this,"no such community in this city");
                    }
                }
            }
            for(UserAccount s:business.getUserAccountDirectory().getUserAccountList()){
                if(s.getUsername().equals(temp_username)){
                   s.setPassword(password);
                   s.setUsername(temp_name);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jScrollPane2;
    private JTable cityJTable;
    private JButton refreshTestJButton;
    private JButton saveJButton;
    private JLabel cityLabel;
    private JTextField nameJTextfield;
    private JButton addJButton;
    private JTextField communityJTextfield;
    private JTextField usernameJTextfield;
    private JTextField passwordJTextfield;
    private JLabel communityLabel;
    private JLabel usernameLabel;
    private JLabel passwordLabel;
    private JButton deleteButton;
    // End of variables declaration//GEN-END:variables
}
